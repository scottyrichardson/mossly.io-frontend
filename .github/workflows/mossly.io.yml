name: Mossly.io

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # AWS
  AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_APP_RUNNER_SERVICE_ARN: ${{ vars.AWS_APP_RUNNER_SERVICE_ARN }}
  # Build settings
  NODE_VERSION: 20.x
  GULP_BUILD_TASK: prod
  GULP_BUILD_PATH: dist
  # FILE PATHS
  INDEX_FILE_PATH: dist/index.html
  CSS_FILE_PATH: dist/assets/css/styles.min.css

jobs:
  build:
    name: Build [ Gulp ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build project
        uses: scottyrichardson/github-actions/.github/actions/gulp-build@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          gulp-build-task: ${{ env.GULP_BUILD_TASK }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.GULP_BUILD_PATH }}
          path: ${{ env.GULP_BUILD_PATH }}
          retention-days: 7

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.GULP_BUILD_PATH }}
          path: ${{ env.GULP_BUILD_PATH }}

      - name: Validate index file
        uses: scottyrichardson/github-actions/.github/actions/validate-file@v1
        with:
          file-path: ${{ env.INDEX_FILE_PATH }}

      - name: Validate CSS file
        uses: scottyrichardson/github-actions/.github/actions/validate-file@v1
        with:
          file-path: ${{ env.CSS_FILE_PATH }}

      - name: Validate HTML
        uses: scottyrichardson/github-actions/.github/actions/validate-html@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          source-path: ${{ env.GULP_BUILD_PATH }}

  deploy-ecr:
    name: Deploy [ ECR ]
    runs-on: ubuntu-latest
    needs: [build, validate]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build, tag, and push Docker image
        uses: ./.github/actions/aws-ecr-deploy-image
        with:
          aws-access-key-id: ${{ secrets.AWS_MOSSLY_DEPLOYER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MOSSLY_DEPLOYER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          repository: mossly.io/frontend
          tags: ${{ github.sha }}
          dockerfile-path: .

      - name: Repoint latest tag
        uses: ./.github/actions/aws-ecr-tag-image
        with:
          aws-access-key-id: ${{ secrets.AWS_MOSSLY_DEPLOYER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MOSSLY_DEPLOYER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          repository: mossly.io/frontend
          source-tag: ${{ github.sha }}
          new-tag: latest

  deploy-app-runner:
    name: Deploy [ App Runner ]
    runs-on: ubuntu-latest
    needs: [build, validate, deploy-ecr]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_MOSSLY_DEPLOYER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MOSSLY_DEPLOYER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to App Runner
        run: |
          aws apprunner start-deployment \
            --service-arn ${{ env.AWS_APP_RUNNER_SERVICE_ARN }} \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: |
          while true; do
            STATUS=$(aws apprunner describe-service --service-arn ${{ env.AWS_APP_RUNNER_SERVICE_ARN }} --query 'Service.Status' --output text)
            if [ "$STATUS" = "RUNNING" ]; then
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Deployment failed"
              exit 1
            fi
            echo "Waiting for deployment... Current status: $STATUS"
            sleep 10
          done

  invalidate-cache:
    name: Invalidate Cache [ CloudFront ]
    runs-on: ubuntu-latest
    needs: [build, validate, deploy-ecr, deploy-app-runner]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Invalidate CloudFront cache
        uses: scottyrichardson/github-actions/.github/actions/aws-cloudfront-invalidation@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MOSSLY_DEPLOYER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MOSSLY_DEPLOYER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cloudfront-distribution-id: ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          cloudfront-invalidation-path: /*
